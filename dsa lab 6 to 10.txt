6.Implement a Menu driven Program in C for the following operations on Singly Linked List 
(SLL) of Student Data with the fields: USN, Name, Avg_Marks
Implement a Menu driven Program in C for the following operations on Singly Linked List 
(SLL) of Student Data with the fields: USN, Name, Avg_Marks
a. Create N number of Students Data by inserting at end of the list.
b. Insert and Delete at front of the list
c. Delete at the end of list
d. Display the status of SLL
d. Demonstration stack and queue
e. Exit


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Student {
    char USN[10];
    char Name[50];
    float Avg_Marks;
    struct Student *next;
};

struct Student *head = NULL;

// Function prototypes for SLL operations
void createList(int n);
void insertAtFront();
void deleteAtFront();
void deleteAtEnd();
void displayList();
// ... functions for stack and queue demonstration

int main() {
    int choice, n;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Create List\n");
        printf("2. Insert at Front\n");
        printf("3. Delete at Front\n");
        printf("4. Delete at End\n");
        printf("5. Display List\n");
        printf("6. Demonstrate Stack and Queue\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the number of students: ");
                scanf("%d", &n);
                createList(n);
                break;
            case 2:
                insertAtFront();
                break;
            case 3:
                deleteAtFront();
                break;
            case 4:
                deleteAtEnd();
                break;
            case 5:
                displayList();
                break;
            case 6:
                // Implement stack and queue demonstration functions here
                break;
            case 7:
                exit(0);
            default:
                printf("Invalid choice!\n");
        }
    }

    return 0;
}



Design and Develop following operations on Doubly Linked List (DLL) of Employee Data 
with the fields: SSN, Name, Dept etc.
a. Create a Node of N Employees Data by inserting in front.
b. Insert a new node to the right of key value.
c. Perform Insertion and Deletion at End of DLL
d. Display the status of DLL and count the number of nodes
e. Exit


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    char SSN[10];
    char Name[50];
    char Dept[20];
    struct Node *prev;
    struct Node *next;
};

struct DoublyLinkedList {
    struct Node *head;
    struct Node *tail;
    int count;
};

// Function prototypes for DLL operations
void createListFront(struct DoublyLinkedList *list, char *SSN, char *Name, char *Dept);
void insertAfterKey(struct DoublyLinkedList *list, char *key, char *SSN, char *Name, char *Dept);
void insertEnd(struct DoublyLinkedList *list, char *SSN, char *Name, char *Dept);
void deleteEnd(struct DoublyLinkedList *list);
void displayList(struct DoublyLinkedList *list);

int main() {
}

// Implementation of DLL functions
void createListFront(struct DoublyLinkedList *list, char *SSN, char *Name, char *Dept) {
    // ...
}

void insertAfterKey(struct DoublyLinkedList *list, char *key, char *SSN, char *Name, char *Dept) {
    // ...
}

void insertEnd(struct DoublyLinkedList *list, char *SSN, char *Name, char *Dept) {
    // ...
}

void deleteEnd(struct DoublyLinkedList *list) {
    // ...
}

void displayList(struct DoublyLinkedList *list) {
    // ...
}



Write a program to implement the following operations on SLL/DLL
 a. Sort the list b. Reverse the list c. Concatenate two list

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class SLL:
    def __init__(self):
        self.head = None

    def create_list(self, data_list):
        for data in data_list:
            self.insert_end(data)

    def insert_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def sort_list(self):
        if self.head is None or self.head.next is None:
            return
        current = self.head
        while current.next:
            next_node = current.next
            while next_node:
                if current.data > next_node.data:
                    current.data, next_node.data = next_node.data, current.data
                next_node = next_node.next
            current = current.next

    def reverse_list(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev

    def concatenate_list(self, other_list):
        current = self.head
        while current.next:
            current = current.next
        current.next = other_list.head

    def display_list(self):
        current = self.head
        while current:
            print(current.data)
            current = current.next

# Example usage
data_list1 = [10, 20, 30, 5, 15]
data_list2 = [40, 50, 60]

sll1 = SLL()
sll1.create_list(data_list1)
sll2 = SLL()
sll2.create_list(data_list2)

print("Original List 1:")
sll1.display_list()

sll1.sort_list()
print("Sorted List 1:")
sll1.display_list()

sll1.reverse_list()
print("Reversed List 1:")
sll1.display_list()

sll1.concatenate_list(sll2)
print("Concatenated List:")
sll1.display_list()



Write a program in C to implement Hashing using Linear probing. Write functions for the 
following: Insert data in the Hash Table, Delete data in the Hash Table, Search an item in the 
Hash Table and Display Hash Table.


#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

int hashTable[TABLE_SIZE];

// Initialize all elements of hash table to -1
void initHashTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        hashTable[i] = -1;
    }
}

int hashFunction(int key) {
    return key % TABLE_SIZE;
}

void insert(int key) {
    int index = hashFunction(key);

    // Linear probing to find an empty slot
    while (hashTable[index] != -1) {
        index = (index + 1) % TABLE_SIZE;
    }

    hashTable[index] = key;
    printf("%d inserted successfully\n", key);
}

void delete(int key) {
    int index = hashFunction(key);

    while (hashTable[index] != -1) {
        if (hashTable[index] == key) {
            hashTable[index] = -1;
            printf("%d deleted successfully\n", key);
            return;
        }
        index = (index + 1) % TABLE_SIZE;
    }

    printf("%d not found in the hash table\n", key);
}

int search(int key) {
    int index = hashFunction(key);

    while (hashTable[index] != -1) {
        if (hashTable[index] == key) {
            return index;
        }
        index = (index + 1) % TABLE_SIZE;
    }

    return -1;  // Not found
}

void displayHashTable() {
    for (int i = 0; i < TABLE_SIZE; i++) {
        printf("Index %d: %d\n", i, hashTable[i]);
    }
}

int main() {
    initHashTable();

    // Example usage
    insert(12);
    insert(25);
    insert(30);
    displayHashTable();

    delete(25);
    displayHashTable();

    int searchIndex = search(30);
    if (searchIndex != -1) {
        printf("30 found at index %d\n", searchIndex);
    } else {
        printf("30 not found in the hash table\n");
    }

    return 0;
}



Design and Develop a program in C for the following operations on Binary Search Tree (BST) 
of Integers.
a. Create a BST of N Integers
b. Traverse the BST using Inorder, Preorder and Post Order techniques
c. Search a KEY element in BST and display the appropriate message



#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node *left;
    struct Node *right;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

struct Node* insertNode(struct Node* root, int data) {
    if (root == NULL) {
        return createNode(data);
    }

    if (data < root->data) {
        root->left = insertNode(root->left, data);
    } else if (data > root->data) {
        root->right = insertNode(root->right, data);
    }

    return root;
}

void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

void preorderTraversal(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
    }
}

void postorderTraversal(struct Node* root) {
    if (root != NULL) {
        postorderTraversal(root->left);
        postorderTraversal(root->right);
        printf("%d ", root->data);
    }
}

struct Node* searchNode(struct Node* root, int key) {
    if (root == NULL || root->data == key) {
        return root;
    }

    if (key < root->data) {
        return searchNode(root->left, key);
    } else {
        return searchNode(root->right, key);
    }
}

int main() {
    struct Node* root = NULL;
    int n, i, data, key;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    printf("Enter the nodes:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &data);
        root = insertNode(root, data);
    }

    printf("\nInorder traversal: ");
    inorderTraversal(root);

    printf("\nPreorder traversal: ");
    preorderTraversal(root);

    printf("\nPostorder traversal: ");
    postorderTraversal(root);

    printf("\nEnter a key to search: ");
    scanf("%d", &key);

    struct Node* foundNode = searchNode(root, key);
    if (foundNode) {
        printf("%d found in the BST\n", key);
    } else {
        printf("%d not found in the BST\n", key);
    }

    return 0;
}



